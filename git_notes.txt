Theory:
-------

Repository: The project files that need to be tracked together after each logical change (The collection of files/project)

commit: snapshot of the project when we decided to commit

detached Head: in a different commit than the latest commit

.git directory: hidden file to store meta data about the files in you repo, to see type ls -a 

HEAD: current commit

Staging area normally shows the lastest commit
 
Branching: Make a new branch of the project for  a new feature, then merge it adterwards. Basically labels for a feature line

Master: main branch, which is the production ready version, never breaks, always create a new branch to add a new feature, bug fix , anything, but master never breaks.

two branches can the same snapshot, but when comitted the one which is checked out is only updated

Each commit tracks the meta data of the parent, but for the brach labels they keep track of the tip of the branch as well

Merging of two commits makes it keep track of two of the parents which were merged. When a branch is merged into the master the master is made the tip of the combined branch.

For merging two branches the original commit where the two branches diverged is a must to know which lines to keep in the final commit.

Deleting a branch deletes the label only, but do it after a merge only, otherwise before a merge if done the commits will be unreachable. The commits are not deleted only the label.


Merging two branches shows the log now sorted with time-stamp, now we can diff

git merge always merges all the specified branches into the currently checked out branch, creating a new commit for that branch. (So the checked out branch is important during commit, this is the branch which now becomes the tip of the commit)

When resolving the merge commits remove the messages and remove the lines not required.

Initialize the repo with a readme if you are creating the repo at Github else don't as you will already have a commit.

Forking: This is basically cloning on Github.

When cloning a repo, a remote is automatically added in your local for that repo

GitHub: store and share repos

When cloning a repo the origin (origin remote) is automatically set for you, there no need to run git remote (since the remote is which connected to local system origin)

When using pull to merge origin/master to local master , do git pull origin master. But when there is changes in both local and origin repo you need to git fetch origin first then merge to master origin/master.

origin/master: The origin repo side commit history 

After resolving a commit history you need to stage and commit the resolved file

Pull request: when you make changes to a shared repo, and want them to be updated to master you can raise a pull request for you change branch to be pull and merged into origin repo by another person (copied in github). done in github and can leave comments and all. When both have a change branch, one lets is merge into the origin/master through pull request and then pull it to his local and if there is now a conflict then he makes the change and merges the master to change branch and pushes it so that the other person can approve it.(The other person needs to approve it if not then merge the master to change for approval)


Note:
-----
Ubuntu
To copy and paste within the terminal on Ubuntu, use Ctrl+Shift+C and Ctrl+Shift+V.

Windows: copy is ctrl+C but paste is shift+insert

Commands:
---------

git log: display the commits log for the repo

git diff: get difference between two commits, needs commit id (Min: first 4 chars of id)

git log --stat: the list of files that got changed in a commit and other useful info

git config --global color.ui auto: get colored outputs

git checkout id: go to a different version

git status: which files have changed since the last commit

git init: Initialize a repo in a directory

git reset: remove a file from staging area if accidently added

git staging area: Intermediate area to choose what files need to be committed. 

git checkout master: go to current master brach commit

git diff with no args: gives the difference between the working directory and the staging area (when files are changed but not added to staging) 

git diff --staged: difference between the staging and current commit (when modified files have been added to staging but not committed)

git reset --hard: reverse any changes to working directory and staging area

git brach: display all branches 

git branch name: create a new branch

git checkout branch_name 

git log --graph --oneline branch_name1 branch_name2: Show a graphical representaion where the specified branches diverged (in one commit message lines ).

git checkout -b branch_name: creata and checkout a new branch on the commit you are currently in.

git show commit_id: gets the diff between the commit_id and its parent commit_id (without knowing the actual parent commit_id)

git branch -d branch_name: delete a branch labels, but not the commits.

git config --global core.autocrlf true: use the same newline char for both windows, mac and linux.

git remote: show all remotes or origin and other working computers of sources

git remote add name url: add a remote

git remote -v: Verbose out of all remotes

git push your_repo_name branch_name: origin for your computer and branch name for which to push

git pull repo_name branch: pull the commits from the repo and merge into local repo

git fetch repo_name: use this when there is change in both origin repo and local repo 

git merge repo/branch branch_local



